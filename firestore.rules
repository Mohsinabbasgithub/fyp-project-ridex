rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Admins collection
    match /admins/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Drivers collection
    match /drivers/{driverId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && (
        // Driver can update their own record
        request.auth.uid == driverId ||
        // Admins can approve/update any driver
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Vehicles collection
    match /vehicles/{vehicleId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Feedback collection
    match /feedback/{feedbackId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Bookings: Only user or driver involved can read/write, or admin can read all
    match /bookings/{bookingId} {
      allow read: if request.auth != null && (
        // Existing doc read checks
        (resource.data.userId != null && request.auth.uid == resource.data.userId) ||
        (resource.data.driverId != null && request.auth.uid == resource.data.driverId) ||
        (resource.data.driverId == null && exists(/databases/$(database)/documents/drivers/$(request.auth.uid))) ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.userId
      );
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.driverId ||
        // Allow a driver to claim a booking when assigning themselves
        request.resource.data.driverId == request.auth.uid ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Chat messages: Allow access to users involved in the ride
    match /chatMessages/{messageId} {
      allow read, write: if request.auth != null;
    }

    // Typing indicators: Allow access to users involved in the ride
    match /typingIndicators/{indicatorId} {
      allow read, write: if request.auth != null;
    }

    // Notifications: Only the user/driver can read/write their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Allow any authenticated actor (user/driver/admin) to create a notification for a user
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Payments: Only the user/driver can read/write their own payments
    match /payments/{paymentId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.driverId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        request.auth.uid == request.resource.data.driverId
      );
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.driverId
      );
    }
  }
} 